const TelegramBot = require('node-telegram-bot-api');
const PexelsAPI = require('pexels-api-wrapper');

const confData = require('./confidental')


var pexelsClient = new PexelsAPI(confData.Pexels_tok);



console.log('main started...')
let counter = {};
let miniCounter = 1;

const bot = new TelegramBot(confData.telegam_tok, {
	polling: {
		interval: 300,
		autoStart: true,
		params: {
			timeout: 10
		}
	}

})

function random(min, max) {
	var rand = min + Math.random() * (max + 1 - min);
	rand = Math.floor(rand);
	return rand;
};


bot.on('message', msg => {
	const {	id } = msg.chat
	const name = msg.chat.first_name

	counter[id] = 1;
	bot.sendMessage(id, name + ', –Ø–∫—ñ —Å–∞–º–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –≤–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–æ:', {
		reply_markup: {
			inline_keyboard: [
				[{
					text: '–ü–æ–ø—É–ª—è—Ä–Ω—ñ –∫–∞—Ä—Ç–∏–Ω–∫–∏ üëç',
					callback_data: 'popular'
				}],
				[{
						text: '–ú–∞—à–∏–Ω–∏ üöó',
						callback_data: 'cars'
					},
					{
						text: "–ü—Ä–∏—Ä–æ–¥–∞ üå≥",
						callback_data: "nature"
					},
					{
						text: "–í–µ—Å—ñ–ª–ª—è üíç",
						callback_data: "wedding"
					}
				],
				[{
						text: '–¢–≤–∞—Ä–∏–Ω–∏ üê∂',
						callback_data: 'animals'
					},
					{
						text: "–ü–æ–¥–æ—Ä–æ–∂—ñ üõ©",
						callback_data: "travel"
					},
					{
						text: "–ú—ñ—Å—Ç–∞ üèô",
						callback_data: "city"
					}
				],
				[{
					text: '–á–∂–∞ ü•ô',
					callback_data: 'food'
				},
				{
					text: "–°–ø–æ—Ä—Ç ‚öΩ",
					callback_data: "sport"
				},
				{
					text: "–ü–æ—Ä–∏ —Ä–æ–∫—É üåà",
					callback_data: "seasons"
				}
			]
			]
		}
	}) //bot send mesage and keyboard


})

function GetPopular(count, page, chatId, queryId) {
	pexelsClient.getPopularPhotos(count, page)
		.then(function (result) {
			for (let index = 0; index < result.photos.length; index++) {
				const element = result.photos[index];
				bot.sendPhoto(chatId, element.src.large2x, {
				caption: `–§–æ—Ç–æ–≥—Ä–∞—Ñ  [${element.photographer}](${element.photographer_url}) –Ω–∞ —Å–∞–π—Ç—ñ [Pexels](https://www.pexels.com)
				
				[–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–æ–±—Ä–∞–∂–µ–Ω–Ω—è](${element.url}).`,
					parse_mode: 'Markdown'
				});
			};
			bot.answerCallbackQuery(queryId, `–ì–æ—Ç–æ–≤–æ`);

			if (counter[chatId] === undefined) {
				counter[chatId] = 2
			} else {
				miniCounter++
				counter[chatId] = miniCounter
			}
			setTimeout(() => {
				bot.sendMessage(chatId, '–©–µ –ø–æ–ø—É–ª—è—Ä–Ω–∏—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫?', {
					reply_markup: {
						inline_keyboard: [
							[{
								text: '–¢–∞–∫',
								callback_data: 'morepopular;' + counter[chatId]

							}]
						]
					}
				}) //bot send mesage and keyboard
			}, 1800);
		}).catch(function (e) {
			console.log(e);
		});

}
function GetSearch(search, count, page, chatId, queryId) {
	pexelsClient.search(search, count, page)
		.then(function (result) {

			for (let index = 0; index < result.photos.length; index++) {
				const element = result.photos[index];

				bot.sendPhoto(chatId, element.src.large2x, {
				caption: `–§–æ—Ç–æ–≥—Ä–∞—Ñ  [${element.photographer}](${element.photographer_url}) –Ω–∞ —Å–∞–π—Ç—ñ [Pexels](https://www.pexels.com)
				
				[–û—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –∑–æ–æ–±—Ä–∞–∂–µ–Ω–Ω—è](${element.url}).`,
					parse_mode: 'Markdown'
				});
			};
			bot.answerCallbackQuery(queryId, `–ì–æ—Ç–æ–≤–æ`);
			if (counter[chatId] === undefined) {
				counter[chatId] = 2
			} else {
				miniCounter++
				counter[chatId] = miniCounter
			}
			setTimeout(() => {
				bot.sendMessage(chatId, '–ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —â–µ ?', {
					reply_markup: {
						inline_keyboard: [
							[{
								text: '–¢–∞–∫',
								callback_data: 'more' + search +';' + counter[chatId]

							}]
						]
					}
				}) //bot send mesage and keyboard
			}, 1800);


		}).catch(function (e) {
			console.log(e);
		});
}

bot.on('callback_query', query => {

	let queryCall = query.data.split(';');
switch (queryCall[0]) {
	case 'wedding':
		GetSearch('wedding', 3, 1, query.message.chat.id, query.id);
		break;
	case 'morewedding':
		GetSearch('wedding', 3, queryCall[1], query.message.chat.id, query.id);
		break;
	case 'nature':
		GetSearch('nature', 3, 1, query.message.chat.id, query.id);
	case 'morenature':
		GetSearch('nature', 3, queryCall[1], query.message.chat.id, query.id);
		break;
	case 'cars':
		GetSearch('cars', 3, 1, query.message.chat.id, query.id);
		break;
	case 'morecars':
		GetSearch('cars', 3, queryCall[1], query.message.chat.id, query.id);
		break;
	case 'animals':
		GetSearch('animals', 3, 1, query.message.chat.id, query.id);
		break;
	case 'moreanimals':
		GetSearch('animals', 3, queryCall[1], query.message.chat.id, query.id);
		break;
	case 'travel':
		GetSearch('travel', 3, 1, query.message.chat.id, query.id);
		break;
	case 'moretravel':
		GetSearch('travel', 3, queryCall[1], query.message.chat.id, query.id);
		break;
	case 'city':
		GetSearch('city', 3, 1, query.message.chat.id, query.id);
		break;
	case 'morecity':
		GetSearch('city', 3, queryCall[1], query.message.chat.id, query.id);
		break;
	case 'food':
		GetSearch('food', 3, 1, query.message.chat.id, query.id);
		break;
	case 'morefood':
		GetSearch('food', 3, queryCall[1], query.message.chat.id, query.id);
		break;
	case 'sport':
		GetSearch('sport', 3, 1, query.message.chat.id, query.id);
		break;
	case 'moresport':
		GetSearch('sport', 3, queryCall[1], query.message.chat.id, query.id);
		break;
	case 'seasons':
		GetSearch('seasons', 3, 1, query.message.chat.id, query.id);
		break;
	case 'moreseasons':
		GetSearch('seasons', 3, queryCall[1], query.message.chat.id, query.id);
		break;

	case 'morepopular':
		GetPopular(3, queryCall[1], query.message.chat.id, query.id);
		break;
	default:
		GetPopular(3, 1, query.message.chat.id, query.id);
		break;
}

	//bot.answerCallbackQuery(query.id,`${query.data}`)

})